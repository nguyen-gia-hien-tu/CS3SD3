const False = 0
const True = 1
range Bool = False..True

set BoolActions = {setTrue, setFalse, [False], [True]}

BOOLVAR = VAL[False],
VAL[v:Bool] = (setTrue -> VAL[True]
			  |setFalse -> VAL[False]
              |[v] -> VAL[v]).

||FLAGS = (flag1 : BOOLVAR || flag2 : BOOLVAR).

NEIGHBOUR1 = (flag1.setTrue -> PICKBERRIES1),
PICKBERRIES1 = (flag2[b:Bool] ->
					if(b) then
						(flag1.setFalse -> NEIGHBOUR1)
					else
						(enter -> exit -> flag1.setFalse -> NEIGHBOUR1)
				) + {{flag1,flag2}.BoolActions}.

NEIGHBOUR2 = (flag2.setTrue -> PRICKBERRIES2),
PRICKBERRIES2 = (flag1[b:Bool] ->
					if(b) then
						(flag2.setFalse -> NEIGHBOUR2)
					else
						(enter -> exit-> flag2.setFalse -> NEIGHBOUR2)
				) + {{flag1,flag2}.BoolActions}.

// only 1 can enter the field at a time
// after entering, that person must exit
property SAFETY = (n1.enter -> n1.exit -> SAFETY | n2.enter -> n2.exit -> SAFETY).

||BERRIES = (n1 : NEIGHBOUR1 || n2 : NEIGHBOUR2 || {n1,n2} :: FLAGS || SAFETY).

progress ENTER1 = {n1.enter} // NEIGBOUR 1 always gets to enter
progress ENTER2 = {n2.enter} // NEIGHBOUR 2 always gets to enter

/* greedy neighbours - make setting the flags has higher priority - eagerness to enter*/
||GREEDY = BERRIES << {{n1,n2}.{flag1,flag2}.setTrue}.
/* progress violations show situation where neither neighbour enters
* each continually retests the lock
*/